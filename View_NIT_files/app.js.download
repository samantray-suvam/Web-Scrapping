'use strict';

var postApp = angular.module('c1proc', 	['datatables',  'pascalprecht.translate','ui.bootstrap', 'ngSanitize'] );
postApp.config(['$translateProvider',function ($translateProvider) {
	 
	 $translateProvider.useStaticFilesLoader({
		  prefix: '/resources/i18n/messages_',
		  suffix: '.json'
		});
	 
/*alert("------"+JSON.parse( $translateProvider.preferredLanguage('en')));*/
 $translateProvider.preferredLanguage('en');
}]);

postApp.directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;
            
            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}]);

postApp.factory('fileUpload', ['$http', function ($http) {
	return 	{
		
    uploadFileToUrl : function(file, jspname){
    	var returnobj=null;
    	var csrftoken = $("meta[name='_csrf']").attr("content");
    	var uploadUrl="/common/upload?_csrf="+csrftoken
        var fd = new FormData();
        fd.append('file', file);
        fd.append('jspname', "TENDERDOC");
        return  $http.post(uploadUrl, fd, {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined}   
        })
        .then(function(result, status) {
        	return result.data;
        })
        
       
	} 
    }
}]);

postApp.factory('createfolder', ['$http', function ($http) {
	var csrftoken = $("meta[name='_csrf']").attr("content");
	return 	{
		 
    createfolderforvendor : function(foldertype,foldername,folderdesc,tenderid){
    	var returnobj=null;
    	var uploadUrl="/common/createfolder?_csrf="+csrftoken
        var fd = new FormData();
        fd.append('foldername', foldername);
        fd.append('folderdesc',folderdesc);
        fd.append('foldertype',foldertype);
        fd.append('tenderid',tenderid);
       // fd.append('hdchecksum',$('#hdchecksum').val())
        return  $http.post(uploadUrl, fd, {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined}
        })
        .then(function(result, status) {
        	return result.data;
        })
        
       
	} 
    }
}]);

postApp.factory('vendorfileUpload', ['$http', function ($http) {
	var csrftoken = $("meta[name='_csrf']").attr("content"); 
	return 	{
    uploadvendorFileToUrl : function(file1,tblbidsubfolderid,docdesc1,foldername,i){
    	var returnobj=null;
    	console.log(file1+"===="+tblbidsubfolderid+"===="+docdesc1+"===="+foldername);
    	var uploadUrl="/common/vendorupload?_csrf="+csrftoken;
        var fd = new FormData();
        fd.append('file', file1);
        fd.append('tblbidsubfolderid', tblbidsubfolderid);
        fd.append('docdesc', docdesc1);
        fd.append('foldername', foldername);
        fd.append('size',i);
        return  $http.post(uploadUrl, fd, {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined,async: false}
        })
        .then(function(result, status) {
        	return result.data;
        })
        
       
	} 
    }
}]);

//factory to upload buyer doc library and this is not the common function
postApp.factory('buyerFileUpload',['$http',function($http){
	return {
		uploadBuyerFileToUrl : function(file1,docDesc1){
			 
			var csrftoken = $("meta[name='_csrf']").attr("content"); 
			console.log(docDesc1);
			var url="/common/buyerDocUpload?_csrf="+csrftoken;  
			var fmData=new FormData();
			fmData.append('file',file1);
			fmData.append('docDesc',docDesc1);  
			
			return $http.post(url,fmData,{ 
				transformRequest: angular.identity,
	            headers: {'Content-Type': undefined,async: false}
			}).then(function(result,status){
				return result.data;
			})
		}
		 
	}
}]);


//factory to upload supplier clarification doc library and this is not the common function
postApp.factory('supplierClariFileUpload',['$http',function($http){
	return {
		uploadSupplierFileToUrl : setTimeout(function(file,docDesc,buyerClarificationId,jspName){
			var csrftoken = $("meta[name='_csrf']").attr("content"); 
			var url="/common/supplierClariDocUpload?_csrf="+csrftoken;  
			var fmData=new FormData();
			fmData.append('file',file);
			fmData.append('docDesc',docDesc);
			fmData.append('buyerClarificationId',buyerClarificationId);
			fmData.append('jspName',jspName); 
			return $http.post(url,fmData,{ 
				transformRequest: angular.identity,
	            headers: {'Content-Type': undefined,async: false}
			}).then(function(result,status){
				return result.data;
			})
		},10000)
		 
	}
}]);





postApp.factory('fileUpload', ['$http', function ($http) {
	return 	{
    uploadFileToUrl : function(file, jspname){
    	setTimeout(function(){
			  // Something you want delayed.

			}, 10000); 
    	var returnobj=null;
    	var csrftoken = $("meta[name='_csrf']").attr("content"); 
    	var uploadUrl="/common/uploadwithhash?_csrf="+csrftoken

        var fd = new FormData();
        fd.append('file', file);
        fd.append('jspname', jspname);
        
        return  $http.post(uploadUrl, fd, {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined,async:false}
        })
        .then(function(result, status) {
        	return result.data;
        })
        
       
	} 
    }
}]);


postApp.factory('itemUploadxls', ['$http', function ($http) {
	return 	{
    uploadFileToUrl : function(file, tenderId,itemPb,scheduleId,boq,parentId,deleteExistingFlag,noOfRowToBeAdded,comingFrom){
    	var returnobj=null;
    	 var csrftoken = $("meta[name='_csrf']").attr("content");
    	var uploadUrl="/tender/uploaditemxls?_csrf="+csrftoken
        var fd = new FormData();
        fd.append('file', file);
        fd.append('tenderId', tenderId);
        fd.append('itemPb', itemPb);
        fd.append('scheduleId', scheduleId);
        fd.append('boq', boq);
        fd.append('parentId', parentId);
        fd.append('deleteExistingFlag',deleteExistingFlag);
        if(noOfRowToBeAdded!=undefined)
        	fd.append('noOfRowToBeAdded',noOfRowToBeAdded);
        if(comingFrom!=undefined && comingFrom!=null)
        	fd.append('comingFrom',comingFrom);
        return  $http.post(uploadUrl, fd, {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined}
        })
        .then(function(result, status) {
        	return result.data;
        })
        
       
	} 
    }
}]);

postApp.factory('sorAndEstimatedRateUploadxls', ['$http', function ($http) {
	return 	{
    uploadFileToUrl : function(file,tenderId){
    	var returnobj=null;
    	 var csrftoken = $("meta[name='_csrf']").attr("content");
    	var uploadUrl="/bulkUploadSORAndEstimatedRate?_csrf="+csrftoken
        var fd = new FormData();
        fd.append('file', file);
        fd.append('tenderId', tenderId);
        return  $http.post(uploadUrl, fd, {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined}
        })
        .then(function(response) {
        	return response;
        })             
	} 
    }
}]);

postApp.factory('chatFileUpload', ['$http', function ($http) {
	return 	{
    uploadFileToUrl : function(file,tenderId){
    	var returnobj=null;
    	 var csrftoken = $("meta[name='_csrf']").attr("content");
    	var uploadUrl="/chatFileUpload?_csrf="+csrftoken
        var fd = new FormData();
        fd.append('file', file);
        fd.append('tenderId', tenderId);
        return  $http.post(uploadUrl, fd, {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined}
        })
        .then(function(response) {
        	return response;
        })             
	} 
    }
}]);

postApp.directive('customOnChange', function() {
	  return {
		    restrict: 'A',
		    link: function (scope, element, attrs) {
		      var onChangeFunc = scope.$eval(attrs.customOnChange);
		      element.bind('change', onChangeFunc);
		    }
		  };
		});

/*postApp.factory('itemUploadxls', ['$http', function ($http) {
	return 	{
    uploadFileToUrl : function(file, tenderId,itemPb,scheduleId,boq,parentId){
    	var returnobj=null;
    	var uploadUrl="/tender/uploaditemxls"
        var fd = new FormData();
        fd.append('file', file);
        fd.append('tenderId', tenderId);
        fd.append('itemPb', itemPb);
        fd.append('scheduleId', scheduleId);
        fd.append('boq', boq);
        fd.append('parentId', parentId);
        return  $http.post(uploadUrl, fd, {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined}
        })
        .then(function(result, status) {
        	return result.data;
        })
        
       
	} 
    }
}]);*/

var app = angular.module('myapp',[]);

var c1procapp=angular.module('c1procapp', 	['c1proc','ngMaterial'] );

postApp.directive("initUpload",function($timeout){
return {
    priority: 0,
    link: function (scope, element, attrs) {
		setTimeout(function(){
			//$('input[type=file]').customFile();
			//$('input[type=file]').customFile();
			//$(element).customFile();

		},1);
	} 
}	
});





function GenerateEncryptedString(palintext) {
    var iterationCount = 1000;
    var keySize = 128;
    var otpvalue = palintext;
    var aesUtil = new AesUtil(keySize, iterationCount);
    var ciphertext = aesUtil.encrypt(document.getElementById("salt").value, document.getElementById("iv").value, document.getElementById("key").value, otpvalue);
    //                                document.getElementById("OTPEncrypted").value = ciphertext;
    return ciphertext;
}
function GenerateRandomNumber() {

    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (var i = 0; i < 5; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}

function GenerateRandomKey()
{
    var iterationCount = 1000;
    var keySize = 128;
    var Base64 = {_keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function (e) {
            var t = "";
            var n, r, i, s, o, u, a;
            var f = 0;
            e = Base64._utf8_encode(e);
            while (f < e.length) {
                n = e.charCodeAt(f++);
                r = e.charCodeAt(f++);
                i = e.charCodeAt(f++);
                s = n >> 2;
                o = (n & 3) << 4 | r >> 4;
                u = (r & 15) << 2 | i >> 6;
                a = i & 63;
                if (isNaN(r)) {
                    u = a = 64
                } else if (isNaN(i)) {
                    a = 64
                }
                t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)
            }
            return t
        }, decode: function (e) {
            var t = "";
            var n, r, i;
            var s, o, u, a;
            var f = 0;
            e = e.replace(/[^A-Za-z0-9+/=]/g, "");
            while (f < e.length) {
                s = this._keyStr.indexOf(e.charAt(f++));
                o = this._keyStr.indexOf(e.charAt(f++));
                u = this._keyStr.indexOf(e.charAt(f++));
                a = this._keyStr.indexOf(e.charAt(f++));
                n = s << 2 | o >> 4;
                r = (o & 15) << 4 | u >> 2;
                i = (u & 3) << 6 | a;
                t = t + String.fromCharCode(n);
                if (u != 64) {
                    t = t + String.fromCharCode(r)
                }
                if (a != 64) {
                    t = t + String.fromCharCode(i)
                }
            }
            t = Base64._utf8_decode(t);
            return t
        }, _utf8_encode: function (e) {
            e = e.replace(/rn/g, "n");
            var t = "";
            for (var n = 0; n < e.length; n++) {
                var r = e.charCodeAt(n);
                if (r < 128) {
                    t += String.fromCharCode(r)
                } else if (r > 127 && r < 2048) {
                    t += String.fromCharCode(r >> 6 | 192);
                    t += String.fromCharCode(r & 63 | 128)
                } else {
                    t += String.fromCharCode(r >> 12 | 224);
                    t += String.fromCharCode(r >> 6 & 63 | 128);
                    t += String.fromCharCode(r & 63 | 128)
                }
            }
            return t
        }, _utf8_decode: function (e) {
            var t = "";
            var n = 0;
            var r = c1 = c2 = 0;
            while (n < e.length) {
                r = e.charCodeAt(n);
                if (r < 128) {
                    t += String.fromCharCode(r);
                    n++
                } else if (r > 191 && r < 224) {
                    c2 = e.charCodeAt(n + 1);
                    t += String.fromCharCode((r & 31) << 6 | c2 & 63);
                    n += 2
                } else {
                    c2 = e.charCodeAt(n + 1);
                    c3 = e.charCodeAt(n + 2);
                    t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
                    n += 3
                }
            }
            return t
        }}

    var passphrse = Base64.encode(GenerateRandomNumber());
    //            var passphrse = $('#key').val();

    var iv = CryptoJS.lib.WordArray.random(128 / 8).toString(CryptoJS.enc.Hex);
    var salt = CryptoJS.lib.WordArray.random(128 / 8).toString(CryptoJS.enc.Hex);

    //            var aesUtil = new AesUtil(keySize, iterationCount);
    //            var ciphertext = aesUtil.encrypt(salt, iv, passphrse, otpvalue);
    //            document.getElementById("OTPEncrypted").value = ciphertext;
    $('#salt').val(salt);
    $('#iv').val(iv);
    $('#key').val(passphrse);

}